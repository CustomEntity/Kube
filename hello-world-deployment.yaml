apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world
  labels:
    app: hello-world
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
        - name: hello-world
          image: python:3.9-slim
          ports:
            - containerPort: 80
          env:
            - name: DB_HOST
              value: "mysql.database.svc.cluster.local"
            - name: DB_USER
              value: "user"
            - name: DB_PASSWORD
              value: "password"
            - name: DB_NAME
              value: "mydb"
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              pip install fastapi uvicorn pymysql
              
              cat > app.py << 'EOF'
              from fastapi import FastAPI, Response
              import pymysql
              import os
              import socket
              from datetime import datetime
              
              app = FastAPI()
              
              # Configuration de la base de données
              db_config = {
                  'host': os.environ.get('DB_HOST'),
                  'user': os.environ.get('DB_USER'),
                  'password': os.environ.get('DB_PASSWORD'),
                  'connect_timeout': 5
              }
              
              @app.get("/")
              def read_root():
                  hostname = socket.gethostname()
                  current_time = datetime.now().strftime("%d/%b/%Y:%H:%M:%S +0000")
              
                  response_text = f"""Server address: {hostname}:80
              Server name: {hostname}
              Date: {current_time}
              URI: /
              Request ID: request-id-123456
              
              --- Database Tables ---
              """
              
                  try:
                      # Connexion à la base de données sans spécifier de base de données
                      connection = pymysql.connect(**db_config)
              
                      with connection.cursor() as cursor:
                          # Lister toutes les bases de données
                          cursor.execute("SHOW DATABASES")
                          databases = cursor.fetchall()
              
                          for db in databases:
                              db_name = db[0]
                              response_text += f"\n[Database: {db_name}]\n"
              
                              # Lister les tables dans cette base de données
                              cursor.execute(f"SHOW TABLES FROM `{db_name}`")
                              tables = cursor.fetchall()
              
                              if tables:
                                  for table in tables:
                                      response_text += f"  - {table[0]}\n"
                              else:
                                  response_text += "  (Aucune table)\n"
              
                      connection.close()
                      response_text += "\n✅ Successfully connected to MySQL database!"
                  except Exception as e:
                      response_text += f"\n❌ Database connection error: {str(e)}"
              
                  return Response(content=response_text, media_type="text/plain")
              EOF
              
              uvicorn app:app --host 0.0.0.0 --port 80
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service
spec:
  selector:
    app: hello-world
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-world-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - http:
        paths:
          - path: /hello
            pathType: Prefix
            backend:
              service:
                name: hello-world-service
                port:
                  number: 80